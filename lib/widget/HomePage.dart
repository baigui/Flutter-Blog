import 'dart:convert';
import 'dart:html';
import 'dart:io';
//import 'dart:io';

import 'package:dio/dio.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutterblog/conf/config.dart';
import 'package:flutterblog/conf/const.dart';

class HomePage extends StatefulWidget {
  HomePage({this.home, Key key, this.title}) : super(key: key);

  final Widget title;
  final Widget home;

  @override
  State<StatefulWidget> createState() => _HomePage();
}

class _HomePage extends State<HomePage> {
  List<Autogenerated> listData = [];

  initState() {
    super.initState();
    getHttp();
  }

  @override
  Widget build(BuildContext context) {
    return ListView.builder(
      shrinkWrap: true,
      itemBuilder: (BuildContext context, int index) {
        return ListItemWidget(listData[index]);
      },
      itemCount: listData.length,
    );
  }

  Future getHttp() async {

   Dio dio = new Dio();
    dio.interceptors
      ..add(InterceptorsWrapper(onRequest: (RequestOptions options) async {
        // Do something before request is sent
        options.headers.forEach((key, value) {
          debugPrint("request header: $key ---- $value");
        });
        options.extra.forEach((key, value) {
          debugPrint("request extra: $key ---- $value");
        });
        return options; //continue
      }, onResponse: (Response response) async {
        response.headers.forEach((name, values) {
          debugPrint("response header: $name ---- $values");
        });
        response.extra.forEach((name, values) {
          debugPrint("response extra : $name ---- $values");
        });
        debugPrint("resonse:  " + response.toString() + "\n");
        // Do something with response data
        return response; // continue
      }, onError: (DioError e) async {
        // Do something with response error

        debugPrint("ERR:" + e.request.headers.toString() + "\n");
        debugPrint("ERR:" + e.response.toString() + "\n");
        return e; //continue
      }));
    try {
      debugPrint("${githubApi}repos/$user/$repo/contents/$blogPath");
      Response response = await dio.get(
          "${githubApi}repos/$user/$repo/contents/$blogPath",
          options: Options(
            method: "get",
              followRedirects: true,
              contentType: Headers.jsonContentType,
              responseType: ResponseType.json));
      print(response.data);
      List<dynamic> newTitle = response.data;

      setState(() {
        listData.clear();
        newTitle.forEach((value) {
          debugPrint(value.toString());
          listData.add(Autogenerated.fromJson(value));
        });
      });
    } catch (e) {
      return print(e);
    }
  }
}

class ListItemWidget extends StatelessWidget {
  final Autogenerated listItem;

  ListItemWidget(this.listItem);

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTapDown: (detail) {
        Navigator.pushNamed(context, "artical",
            arguments: listItem.downloadUrl);
      },
      child: ConstrainedBox(
        constraints: BoxConstraints(
            minWidth: double.infinity, //宽度尽可能大
            minHeight: 120.0 //最小高度为50像素
            ),
        child: Padding(
          padding: EdgeInsets.only(left: 120, top: 20),
          child: Text(
            listItem.name,
            style: TextStyle(color: Colors.black, fontSize: 30),
          ),
        ),
      ),
      onTap: () {},
    );
  }
}

class Autogenerated {
  String name;
  String path;
  String sha;
  int size;
  String url;
  String htmlUrl;
  String gitUrl;
  String downloadUrl;
  String type;
  Links lLinks;

  Autogenerated(
      {this.name,
      this.path,
      this.sha,
      this.size,
      this.url,
      this.htmlUrl,
      this.gitUrl,
      this.downloadUrl,
      this.type,
      this.lLinks});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    name = json['name'];
    path = json['path'];
    sha = json['sha'];
    size = json['size'];
    url = json['url'];
    htmlUrl = json['html_url'];
    gitUrl = json['git_url'];
    downloadUrl = json['download_url'];
    type = json['type'];
    lLinks = json['_links'] != null ? new Links.fromJson(json['_links']) : null;
  }
}

class Links {
  String self;
  String git;
  String html;

  Links({this.self, this.git, this.html});

  Links.fromJson(Map<String, dynamic> json) {
    self = json['self'];
    git = json['git'];
    html = json['html'];
  }
}
